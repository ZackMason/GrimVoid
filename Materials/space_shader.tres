[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

uniform sampler2D n1;
uniform sampler2D n2;
uniform sampler2D n3;
uniform mat4 global_transform;
uniform vec2 camera_position;

uniform vec4 c1 : hint_color;
uniform vec4 c2 : hint_color;
uniform vec4 c3 : hint_color;

varying vec2 position;

void vertex()
{
	position = (global_transform * vec4(VERTEX,0.0,1.0)).xy;
}

vec2 hash( vec2 p ) {
	p = vec2(dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)));
	return -1.0 + 2.0*fract(sin(p)*43758.5453123);
}

float noise( in vec2 p ) {
    const float K1 = 0.366025404; // (sqrt(3)-1)/2;
    const float K2 = 0.211324865; // (3-sqrt(3))/6;
	vec2 i = floor(p + (p.x+p.y)*K1);	
    vec2 a = p - i + (i.x+i.y)*K2;
    vec2 o = (a.x>a.y) ? vec2(1.0,0.0) : vec2(0.0,1.0); //vec2 of = 0.5 + 0.5*vec2(sign(a.x-a.y), sign(a.y-a.x));
    vec2 b = a - o + K2;
	vec2 c = a - 1.0 + 2.0*K2;
    vec3 h = max(0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );
	vec3 n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));
    return dot(n, vec3(70.0));	
}

float fbm(vec2 n) {
	const mat2 m = mat2(vec2(1.6,  1.2),vec2( -1.2,  1.6) );
	float total = 0.0, amplitude = 0.1;
	for (int i = 0; i < 7; i++) {
		total += noise(n) * amplitude;
		n = m * n;
		amplitude *= 0.4;
	}
	return total;
}

void fragment()
{
	vec3 color = vec3(0.0);
	vec2 p = UV;
	
	float r1 = texture(n1, position/1500.0).r;
	float r2 = texture(n2, position/2000.0).r;
	float r3 = texture(n3, position/3000.0).r;


	r1 = fbm(position/1500.0+camera_position/1800.0);
	r2 = fbm(position/2000.0+camera_position/1550.0);
	r3 = fbm(position/3000.0+camera_position/1990.0);
	
//	r1 = smoothstep(0.45, 0.5 , r1);
//	r2 = smoothstep(0.45, 0.5 , r2);
//	r3 = smoothstep(0.45, 0.5 , r3);
	
//	r1 *= r1 * r1;
//	r2 *= r2 * r2;
//	r3 *= r3 * r3;
	r1 *= 3.0;
	r2 *= 3.0;
	r3 *= 8.0;
	

	color.rgb += r1 * c1.rgb;
	color.rgb += r2 * c2.rgb;
	color.rgb += r3 * c3.rgb;
	
	COLOR.rgb = color;
} "
